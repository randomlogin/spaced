name: Release

# Trigger the workflow on push tags like "v*.*.*" (version tags)
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from your repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Rust using the official Rust toolchain action
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # Cache Cargo dependencies to speed up builds
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/index
          key: ${{ runner.os }}-cargo-index
          restore-keys: |
            ${{ runner.os }}-cargo-index

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      # Build the Rust project
      - name: Build project
        run: cargo build --release

      # Run tests to ensure everything works
      - name: Run tests
        run: cargo test --release

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Rust again in the release job
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # Build the project to create a release artifact
      - name: Build release binary
        run: cargo build --release

      # Archive the release artifacts (binaries)
      - name: Create release archive
        run: |
          mkdir -p release
          cp target/release/spaced release/spaced
          cp target/release/space-cli release/space-cli
          tar -czvf release.tar.gz release/

      # Create a release on GitHub
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Automated release of version ${{ github.ref }}.
          draft: false
          prerelease: false
          generate_release_notes: true

      # Upload the release artifact (binary) to the release
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.tar.gz
          asset_name: spaced.tar.gz
          asset_content_type: application/gzip
